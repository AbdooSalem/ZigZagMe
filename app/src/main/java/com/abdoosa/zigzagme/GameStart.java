package com.abdoosa.zigzagme;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.graphics.Typeface;import android.media.MediaPlayer;import android.os.Bundle;import android.os.Handler;import android.util.DisplayMetrics;import android.view.Gravity;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.PopupWindow;import android.widget.RelativeLayout;import android.widget.TableLayout;import android.widget.TextView;public class GameStart extends Activity {    DisplayMetrics disp = new DisplayMetrics();    // Declaring different layouts and views    RelativeLayout game_layout;    TableLayout scoresTable, difficultyTable;    LayoutInflater layoutInflater;    TextView counterText, scoreShow, score1, score2, score3, score4, scoreLabel;    ViewGroup popupLayout;    PopupWindow popupWindow;    Button showHighScores, difficultyBtn, level1, level2, level3, muteBtn, replayBtn;    // Declaring different variables    Pillar[] pillars = new Pillar[23];    Top[] tops = new Top[23];    GiantPillar giantP;    TopGiantPillar topG;    Handler h = new Handler();    Ball ball;    static int devHeight, devWidth, densityDpi;    int r1, l1, r2, l2, counter;    boolean ballRight=true, colDetected=true;    int[] highScores = new int[4];    boolean mute = false, inGiantP, firstGame=true;    int level = 1;    int DELAY;    float xOffset, yOffset;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // On creating , the contentView is R.layout.game_layout        // and the two methods are invoked        setContentView(R.layout.game_layout);        initiateView();    }    // to prevent the next activity from getting back to Splash class    @Override    public void onBackPressed() {        moveTaskToBack(true);    }    // switching to Setting activity    public void movingToSetting(View v){        final Bundle bundle = getIntent().getExtras();        String[] data = bundle.getStringArray("key");        bundle.putStringArray("key", data);        final Intent intent = new Intent(this, Setting.class);        scoreLabel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                intent.putExtras(bundle);                startActivity(intent);            }        });    }    // This method is to send the view to back    public static void sendViewToBack(final View child){        final ViewGroup parent = (ViewGroup) child.getParent();        if(parent != null) {            parent.removeView(child);            parent.addView(child, 0);        }    }    // Initiates the static view of the main layout of the game    public void initiateView(){        game_layout = (RelativeLayout) findViewById(R.id.game_layout);        setContentView(game_layout);        getWindowManager().getDefaultDisplay().getMetrics(disp);        devHeight = disp.heightPixels;        devWidth = disp.widthPixels;        densityDpi = (int)(disp.density * 160f);        // Connecting the views and the layouts to their correspondents in XML files        layoutInflater = (LayoutInflater) this.getSystemService(this.LAYOUT_INFLATER_SERVICE);        popupLayout = (ViewGroup) layoutInflater.inflate(R.layout.gameoverpop, null);        popupWindow = new PopupWindow(popupLayout, RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT, false);        showHighScores = (Button) popupLayout.findViewById(R.id.highScores);        scoresTable = (TableLayout) popupLayout.findViewById(R.id.scoresTable);        scoreShow = (TextView) popupLayout.findViewById(R.id.scoreShow);        score1 = (TextView) popupLayout.findViewById(R.id.score1);        score2 = (TextView) popupLayout.findViewById(R.id.score2);        score3 = (TextView) popupLayout.findViewById(R.id.score3);        score4 = (TextView) popupLayout.findViewById(R.id.score4);        counterText = (TextView) findViewById(R.id.counterText);        //counterText.setText(0);        scoreLabel = (TextView) popupLayout.findViewById(R.id.scoreLabel);        difficultyTable = (TableLayout) popupLayout.findViewById(R.id.difficultyTable);        difficultyBtn = (Button) popupLayout.findViewById(R.id.difficulty);        level1 = (Button) popupLayout.findViewById(R.id.level1Btn);        level2 = (Button) popupLayout.findViewById(R.id.level2Btn);        level3 = (Button) popupLayout.findViewById(R.id.level3Btn);        muteBtn= (Button) popupLayout.findViewById(R.id.muteBtn);        replayBtn= (Button) popupLayout.findViewById(R.id.replay);        // Setting the background color to gray        game_layout.setBackgroundColor(Color.rgb(226, 241, 254));        ball = new Ball(this);        // Setting the first pillar, positioning it and adding it to game_layout layout        pillars[0] = new Pillar(this);        pillars[0].setFirstPillar();        game_layout.addView(pillars[0]);        sendViewToBack(pillars[0]);        // Setting the first topPillar and  positioning it        tops[0] = new Top(this);        tops[0].setFirstPillar();        // Generating the positions for the next pillars and topPillars        for(int i=1; i<pillars.length; i++){            pillars[i] = new Pillar(this);            pillars[i].setNewPillarX(pillars[i-1].getX());            pillars[i].pillarNewY(pillars[i-1].getY());            game_layout.addView(pillars[i]);            sendViewToBack(pillars[i]);            tops[i] = new Top(this);            tops[i].setX(pillars[i].getX());            tops[i].setY(pillars[i].getY());        }        //  Setting the giant pillar        giantP = new GiantPillar(this);        giantP.setX(tops[0].getX()-giantP.getGiantPillarWidth()/2);        giantP.setY(tops[0].getY()+tops[0].getTopHeight()/2);        game_layout.addView(giantP);        // Setting the topGiant pillar        topG = new TopGiantPillar(this);        topG.setX(giantP.getX());        topG.setY(giantP.getY());        // Setting the ball, positioning it and adding it to game_layout layout        ball.setX(giantP.getX()+giantP.getGiantPillarWidth()/2);        ball.setY(giantP.getY()-30+giantP.getGiantPillarHeight()/2);        game_layout.addView(ball);        new Handler().postDelayed(new Runnable() {            @Override            public void run() {                if(firstGame){                    popupWindow.showAtLocation(game_layout, Gravity.CENTER, 0, 0);                    scoreLabel.setVisibility(View.INVISIBLE);                    scoreShow.setVisibility(View.INVISIBLE);                    counterText.setVisibility(View.INVISIBLE);                    popupLayout.setBackgroundColor(Color.argb(50,5, 44, 44));                }else {                    replayBtn.setText("Replay");                }            }        }, 50);        game_layout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                game_layout.setOnClickListener(null);                movement();            }        });    }    // This method is for starting the game and make the views moves    public void movement(){        xOffset=devWidth/100;        yOffset= (float) (xOffset*0.72);        // Declaring the sounds, and the delay(according to the difficulty level)        DELAY=1;        if(level == 1){            xOffset*=0.8;            yOffset*=0.8;        }        else if(level == 3){            xOffset*=1.2;            yOffset*=1.2;        }        final MediaPlayer beep = MediaPlayer.create(this, R.raw.beep3);        final MediaPlayer gameOverSound = MediaPlayer.create(this, R.raw.gameover2);        inGiantP=true;        h.postDelayed(new Runnable() {            @Override            public void run() {                game_layout.setOnTouchListener(new View.OnTouchListener() {                    @Override                    public boolean onTouch(View v, MotionEvent event) {                        // Detecting the touch on the screen, increasing the score counter, starting the beep                        // and inverse the direction of the ball                        if(event.getAction() == MotionEvent.ACTION_UP){                            ballRight = !ballRight;                            counter+=5;                            counterText.setText(String.valueOf(counter));                            if(!mute)                                beep.start();                        }                        return false;                    }                });                // Check whether the ball is in the path(means the ball collide with at least 1 topPillar)                for(int i=0; i<pillars.length; i++){                    r1 = (int) tops[i].getX();                    l1 = (int) tops[i].getY();                    r2 = (int) giantP.getX();                    l2 = (int) giantP.getY();                    if(tops[i].isInBottom()) {                        if (ball.isCollisionDetected(r1, l1, Top.top)) {                            inGiantP=false;                            colDetected = true;                            break;                        }                    }                    if(inGiantP && ball.isCollisionDetected(r2, l2, TopGiantPillar.topGiantPillar)) {                        colDetected = true;                        break;                    }else{                        if(inGiantP && ball.isCollisionDetected(r1, l1, Top.top)){                            colDetected = true;                            break;                        }                    }                    colDetected=false;                }                // If no collision detected (Game Over), play the gameOver sound, showing the popUp window,                // showing the score and adding it to highscores if it's in the first 4 high scores                if(!colDetected){                    if(!mute)                        gameOverSound.start();                    inGiantP=false;                    popupWindow.showAtLocation(game_layout, Gravity.CENTER, 0, 0);                    counterText.setVisibility(View.INVISIBLE);                    scoreShow.setText(String.valueOf(counter));                    addHighScore(counter);                    assignScores();                    counterText.setText("0");                    SharedPreferences keyValues = getApplicationContext().getSharedPreferences("counter", 0);                    SharedPreferences.Editor keyValuesEditor = keyValues.edit();                    keyValuesEditor.putInt("counter", counter);                    keyValuesEditor.apply();                    counter=0;                    return;                }                // moving pillars through x-axis. If the pillar is in the bottom of the screen, a new position                // will be generated (the topPillars follow the pillars)                for(int i=0; i<pillars.length; i++){                    if (pillars[i].isLow()){                        if(i == 0){                            pillars[i].setNewPillarX(pillars[pillars.length-1].getX());                            pillars[i].pillarNewY(pillars[pillars.length-1].getY());                            sendViewToBack(pillars[i]);                        }else{                            pillars[i].setNewPillarX(pillars[i-1].getX());                            pillars[i].pillarNewY(pillars[i-1].getY());                            sendViewToBack(pillars[i]);                        }                        break;                    }                    tops[i].setX(pillars[i].getX());                    tops[i].setY(pillars[i].getY());                }                // moving pillar and topPillar downward                for(int i=0; i<pillars.length; i++){                    pillars[i].setY(pillars[i].getY() + yOffset);                    tops[i].setY(pillars[i].getY());                }                giantP.setY(giantP.getY()+yOffset);                topG.setY(topG.getY()+yOffset);                // moving ball on click                if(ballRight)                    ball.setX(ball.getX() + xOffset);                else                    ball.setX(ball.getX() - xOffset);                h.postDelayed(this, DELAY);            }        }, DELAY);    }    // When the REPLAY button is clicked this method is invoked    // The pillars, topPillars and the ball will be invisible    // The gameOver popup windows will closed    // The view of the game will be reseted (initiateView and movement method)    public void replay(View v){        if(firstGame){            firstGame=false;            movement();            popupWindow.dismiss();            return;        }        ball.setVisibility(View.GONE);        counterText.setVisibility(View.VISIBLE);        giantP.setVisibility(View.INVISIBLE);        topG.setVisibility(View.INVISIBLE);        popupWindow.dismiss();        for(int i=0; i<pillars.length; i++){            pillars[i].setVisibility(View.GONE);            tops[i].setVisibility(View.GONE);        }        initiateView();    }    // This method takes a score and orders it in the highScores array    // The highScores array contains just 4 high scores    private void addHighScore(int score){        for(int i=0; i<highScores.length; i++){            if (score > highScores[i]){                for (int j=highScores.length-1; j>i; j--){                    highScores[j] = highScores[j-1];                }                highScores[i] = score;                break;            }        }    }    // This method is to assign the scores to their correspondent TextViews    private void assignScores(){        score1.setText(String.valueOf(highScores[0]));        score2.setText(String.valueOf(highScores[1]));        score3.setText(String.valueOf(highScores[2]));        score4.setText(String.valueOf(highScores[3]));    }    // This method is to show and hide the scoresTable when clicking on "High Scores" button    public void showScores(View v){        if(scoresTable.getVisibility() == View.VISIBLE)            scoresTable.setVisibility(View.INVISIBLE);        else {            difficultyTable.setVisibility(View.INVISIBLE);            scoresTable.setVisibility(View.VISIBLE);        }    }    public void displayDifficulties(View v){        if(difficultyTable.getVisibility() == View.VISIBLE)            difficultyTable.setVisibility(View.INVISIBLE);        else {            scoresTable.setVisibility(View.INVISIBLE);            difficultyTable.setVisibility(View.VISIBLE);        }    }    public void mute(View v){        mute=!mute;        if(mute)            muteBtn.setText("UNMUTE");        else            muteBtn.setText("MUTE");    }    public void setButtonState(View v){        int id=v.getId();        if(id==2131492994){            level=1;            level1.setTextColor(Color.BLACK);            level1.setTypeface(null, Typeface.BOLD);            level2.setTextColor(Color.WHITE);            level2.setTypeface(null, Typeface.NORMAL);            level3.setTextColor(Color.WHITE);            level3.setTypeface(null, Typeface.NORMAL);            difficultyTable.setVisibility(View.INVISIBLE);        }else if(id==2131492995){            level=2;            level1.setTextColor(Color.WHITE);            level1.setTypeface(null, Typeface.NORMAL);            level2.setTextColor(Color.BLACK);            level2.setTypeface(null, Typeface.BOLD);            level3.setTextColor(Color.WHITE);            level3.setTypeface(null, Typeface.NORMAL);            difficultyTable.setVisibility(View.INVISIBLE);        }else if(id==2131492996) {            level=3;            level1.setTextColor(Color.WHITE);            level1.setTypeface(null, Typeface.NORMAL);            level2.setTextColor(Color.WHITE);            level2.setTypeface(null, Typeface.NORMAL);            level3.setTextColor(Color.BLACK);            level3.setTypeface(null, Typeface.BOLD);            difficultyTable.setVisibility(View.INVISIBLE);        }    }}